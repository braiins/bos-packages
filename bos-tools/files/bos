#!/bin/sh

# Copyright (C) 2023  Braiins Systems s.r.o.
#
# This file is part of Braiins Open-Source Initiative (BOSI).
#
# BOSI is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Please, keep in mind that we may also license BOSI or any part thereof
# under a proprietary license. For more information on the terms and conditions
# of such proprietary license or if you have any other questions, please
# contact us at opensource@braiins.com.

# Immediately exit when error occurs
set -e

usage() {
	echo "usage: bos [-h] {factory_reset} ..."
	echo
	echo "positional arguments:"
	echo "  {factory_reset}"
	echo "    factory_reset [--hard]      reboot and initiate factory reset"
	echo "                                (--hard flag causes reflash of the factory firmware, without it only the overlay is purged)"
	echo "optional arguments:"
	echo "  -h, --help            show this help message and exit"
}

factory_reset() {
	if [ $# -gt 1 ]; then
		echo "command 'factory_reset' does not take more than 1 argument" >&2
		exit 1
	fi

	. /lib/functions/bos-defaults.sh

	local hard_reset
	if [ "$1" = "--hard" ]; then
		hard_reset="true"
	fi

	if [ "$(bos_mode)" = "emmc" ] && [ -n "$hard_reset" ]; then
		local fip_dev fip_size env_size env_offset

		echo "Flashing factory firmware"

		fip_dev=$(find_part_fip_dev)
		if [ -z "$fip_dev" ]; then
			log_default_config "partition 'fip' cannot be found"
			exit 1
		fi

		fip_size=$(lsblk -bno SIZE $fip_dev)
		env_size=$((UBOOT_ENV_FULL_SIZE))
		env_offset=$(( (fip_size - env_size) / env_size ))

		# Erase U-Boot environment to force default one which do factory reset
		dd if=/dev/zero of=$fip_dev seek=$env_offset bs=$env_size count=1 \
			> /dev/null 2>&1

		# Restore original bootloaders
		local boot_backup_path uboot_path
		local block_size=4096
		local backup_size=$((EMMC_BOOT_BACKUP_SIZE))
		local uboot_blk=$(( EMMC_UBOOT_BACKUP_OFFSET / block_size ))
		local uboot_cnt=$(( EMMC_UBOOT_BACKUP_SIZE / block_size ))
		boot_backup_path=$(mktemp)
		uboot_path=$(mktemp)

		dd if=/dev/$EMMC_BOOT_BACKUP_DEV of="$boot_backup_path" \
			bs=$backup_size count=1 \
			> /dev/null 2>&1
		dd if="$boot_backup_path" skip=$uboot_blk count=$uboot_cnt \
			bs=$block_size 2>/dev/null | gzip -d > "$uboot_path"

		local uboot_size=$((EMMC_UBOOT_SIZE))
		dd if=/dev/zero of=$fip_dev bs=$uboot_size count=1 \
			> /dev/null 2>&1
		dd if="$uboot_path" of=$fip_dev bs=$block_size > /dev/null 2>&1

		echo 0 > /sys/class/block/$EMMC_BOOT_DEV/force_ro
		dd if="$boot_backup_path" of=/dev/$EMMC_BOOT_DEV bs=$block_size \
			> /dev/null 2>&1
	else
		echo "Purging overlay"
		# Do generic factory reset which only wipes rootfs overlay
		rm "/overlay/.fs_state"
	fi

	sync
	reboot
}

# Check number of arguments
if [ $# -lt 1 ]; then
	echo "missing command argument" >&2
	exit 1
fi

# Try to find command
command="$1"
usedaemon="$2"

NO_DAEMON_FLAG="--nodaemon"

case $command in
	factory_reset)
		# Consume the first argument, aka "command"
		shift
		if [ "$usedaemon" != "$NO_DAEMON_FLAG" ]; then
			. /lib/functions/bos-defaults.sh
			bos-tools daemonize /bin/sh -- -c "source $0" "$0" "$command" "--nodaemon" "$@"
		else
			# Consume the second argument, aka "--nodaemon"
			shift
			$command "$@"
		fi
	;;
	-h|--help)
		usage
	;;
	*)  # Unknown command
		echo "unknown command '$command'" >&2
		exit 1
	;;
esac
